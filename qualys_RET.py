#!/usr/bin/python
import optparse
import csv
import sys,os
def parse_by_severity(qualysreportfile, severity,scantype):
	x =[]
	with open(qualysreportfile) as f:
		for i, line in enumerate(csv.reader(f,delimiter=','),1):
			if i > 9:
				try:
					if((int(line[8])==int(severity)) &(str(line[7])!='Practice')):
					 if((int(line[8])==int(severity)) &(str(line[7])!='Ig')):
						y = str(line[6])
						x.append(line[6])
				except:
					pass
				continue
	for i in set(x):
		parse_by_title(qualysreportfile,str(i),scantype)

def parse_by_title(qualysreportfile, title, scantype):
	with open(qualysreportfile) as f:
		for i, line in enumerate(csv.reader(f,delimiter=','),1):
                        if i>9:
                                try:
                                        if(str(title) in str(line[6])):
                                                if((line[9]!=None) and (line[1]!=None)):
							if line[8] == "1" or str(line[8]) ==  "2":
		 						sev = "Low"
							if str(line[8]) == "3":
				 				sev = "Medium"
							if line[8] == "4" or str(line[8]) == "5":
					 			sev = "High"
###make cli input for Vulnerability Scan to say App,DB,or INF
							description = str(line[16])
							description = description.replace(",", ";")
							description = description.replace("\n", " ")
							impact = str(line[17])
							impact = impact.replace(",", ";")
							impact = impact.replace("\n", " ")
							solution = str(line[18])
							solution = solution.replace(",", ";")
							solution = solution.replace("\n", " ")
							print "RA-5 , " + title + ", " + scantype +  ", " + description + ", " + line[0] + " " + line[1] + ", " + "N/A, " + str(sev) + ", " + str(sev) + ", " + str(sev) + ", " + impact + ", N/A, " + str(sev) + ", " + str(sev) + ", " + str(sev) + ", " + solution + ", N/A"
                                                else:
                                                        print line[0]+" : "+line[1]
                                                        threat = str(line[18])+ "\n\n\n"+str(line[19])+ "\n\n\n"+str(line[20])
                                except:
                                        pass
                                continue





def main():
	parser = optparse.OptionParser('python %prog -f qualys.csv  -s <severity> -t <scantype>')
#	parser = optparse.OptionParser('python %prog -f qualys.csv  -s <severity> or -cve <CVEID> or -t <title>')
	parser.add_option('-f', dest = 'tgtfile', metavar = 'FILE', help ='specify the qualys report in csv')
	parser.add_option('-s', dest = 'severity', help ='specify the severity 1-5 report in csv')
#	parser.add_option('-c', dest = 'CVEID', help ='eg.,CVE-2014-0224')
	parser.add_option('-t', dest = 'scantype', help ='NTP monlist feature denial of service')
#	parser.add_option('-t', dest = 'title', help ='NTP monlist feature denial of service')
	(options,args) = parser.parse_args()
	reportfile = options.tgtfile
	severity = options.severity
#	cve = options.CVEID
#	vulntitle = options.title
	scantype = options.scantype
	if((reportfile==None) & (severity==None) & (scantype==None)):
#	if((reportfile==None) & ((severity==None)|(cve==None)|(vulntitle==None))):
		print parser.usage
		sys.exit(0)
	if(severity!=None):
		print "Identifier, " + "Name, " + "Source of Discovery, " + "Description, " + "Affected IP Address / Hostname / Database, " + "Applicable Threats, " + "Likelihood (before Mitigating Controls / Factors), " + "Impact (before Mitigating Controls / Factors), " + "Risk Exposure (before Mitigating Controls / Factors), " + " Risk Statement, " + "Mitigating Controls / Factors, " + "Likelihood (after Mitigating Controls / Factors), " + "Impact (after Mitigating Controls / Factors), " + "Risk Exposure (after Mitigating Controls / Factors), " + "Recommendation, " + "Justification or Proposed Remediation"
		if int(severity) in range(1,6):
			parse_by_severity(reportfile,severity,scantype)
		else:
			print "[!]Severity must be in range 1 to 5."
			print "[!]Exiting...."
			sys.exit(0)
#	if(cve!=None):
#		parse_by_cve(reportfile,cve)
#	if(vulntitle!=None):
#		parse_by_title(reportfile,vulntitle)

if __name__ =="__main__":
    main()
